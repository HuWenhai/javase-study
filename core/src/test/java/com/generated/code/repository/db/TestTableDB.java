package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Collections;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.TestTable;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class TestTableDB
{

	private static String TABLE_NAME = "TEST_TABLE";

	private static String TABLE_ALIAS = "tt";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static final String NAMED_INSERT_SQL = "insert into test_table(test_code, dict_name, parent_code, sorted) values(:test_code, :dict_name, :parent_code, :sorted)";

	public static final String NAMED_UPDATE_BY_PK_SQL = "update test_table set  test_code = :test_code, dict_name = :dict_name, parent_code = :parent_code, sorted = :sorted";

	public static final String NAMED_SELECT_BY_PK_SQL = "select test_code, dict_name, parent_code, sorted from test_table";

	public static final String NAMED_DELETE_BY_PK_SQL = "delete from test_table";

	public static final String SELECT_BY_PK_SQL = "select test_code, dict_name, parent_code, sorted from test_table";

	public static final String DELETE_BY_PK_SQL = "delete from test_table";

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		TEST_CODE("test_code"),
		DICT_NAME("dict_name"),
		PARENT_CODE("parent_code"),
		SORTED("sorted"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public TestTableDB ()
	{

	}

	public static final RowMapper<TestTable> ROW_MAPPER = new TestTableRowMapper ();
	public static final class  TestTableRowMapper implements RowMapper<TestTable>
	{
		public TestTable mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			TestTable obj = new TestTable();
			obj.setTestCode(rs.getString(COLUMNS.TEST_CODE.getColumnName()));
			obj.setDictName(rs.getString(COLUMNS.DICT_NAME.getColumnName()));
			obj.setParentCode(rs.getString(COLUMNS.PARENT_CODE.getColumnName()));
			obj.setSorted(rs.getInt(COLUMNS.SORTED.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<TestTable> ROW_UNMAPPER = new TestTableRowUnmapper ();
	public static final class TestTableRowUnmapper implements RowUnmapper<TestTable>
	{
		public Map<String, Object> mapColumns(TestTable testtable)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.TEST_CODE.getColumnName(), testtable.getTestCode());
			mapping.put(COLUMNS.DICT_NAME.getColumnName(), testtable.getDictName());
			mapping.put(COLUMNS.PARENT_CODE.getColumnName(), testtable.getParentCode());
			mapping.put(COLUMNS.SORTED.getColumnName(), testtable.getSorted());
			return Collections.unmodifiableMap(mapping);
		}
	}

	public static final RowMapper<TestTable> ALIAS_ROW_MAPPER = new TestTableAliasRowMapper ();
	public static final class  TestTableAliasRowMapper implements RowMapper<TestTable>
	{
		public TestTable mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			TestTable obj = new TestTable();
			obj.setTestCode(rs.getString(COLUMNS.TEST_CODE.getColumnAliasName()));
			obj.setDictName(rs.getString(COLUMNS.DICT_NAME.getColumnAliasName()));
			obj.setParentCode(rs.getString(COLUMNS.PARENT_CODE.getColumnAliasName()));
			obj.setSorted(rs.getInt(COLUMNS.SORTED.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}