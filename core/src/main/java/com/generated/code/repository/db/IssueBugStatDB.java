package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.IssueBugStat;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class IssueBugStatDB
{

	private static String TABLE_NAME = "ISSUE_BUG_STAT";

	private static String TABLE_ALIAS = "ibs";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		BUG_STAT_ID("bug_stat_id"),
		REDMINE_PROJECT_ID("redmine_project_id"),
		DAY("day"),
		TOTAL_NUM("total_num"),
		NEW_NUM("new_num"),
		CLOSED_NUM("closed_num"),
		REJECTED_NUM("rejected_num"),
		SURPLUS_NUM("surplus_num"),
		FFR("ffr"),
		CREATED_TIME("created_time"),
		UPDATED_TIME("updated_time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public IssueBugStatDB ()
	{

	}

	public static final RowMapper<IssueBugStat> ROW_MAPPER = new IssueBugStatRowMapper ();
	public static final class  IssueBugStatRowMapper implements RowMapper<IssueBugStat>
	{
		public IssueBugStat mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			IssueBugStat obj = new IssueBugStat();
			obj.setBugStatId(rs.getInt(COLUMNS.BUG_STAT_ID.getColumnName()));
			obj.setRedmineProjectId(rs.getInt(COLUMNS.REDMINE_PROJECT_ID.getColumnName()));
			obj.setDay(rs.getString(COLUMNS.DAY.getColumnName()));
			obj.setTotalNum(rs.getInt(COLUMNS.TOTAL_NUM.getColumnName()));
			obj.setNewNum(rs.getInt(COLUMNS.NEW_NUM.getColumnName()));
			obj.setClosedNum(rs.getInt(COLUMNS.CLOSED_NUM.getColumnName()));
			obj.setRejectedNum(rs.getInt(COLUMNS.REJECTED_NUM.getColumnName()));
			obj.setSurplusNum(rs.getInt(COLUMNS.SURPLUS_NUM.getColumnName()));
			obj.setFfr(rs.getFloat(COLUMNS.FFR.getColumnName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<IssueBugStat> ROW_UNMAPPER = new IssueBugStatRowUnmapper ();
	public static final class IssueBugStatRowUnmapper implements RowUnmapper<IssueBugStat>
	{
		public Map<String, Object> mapColumns(IssueBugStat issuebugstat)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.BUG_STAT_ID.getColumnName(), issuebugstat.getBugStatId());
			mapping.put(COLUMNS.REDMINE_PROJECT_ID.getColumnName(), issuebugstat.getRedmineProjectId());
			mapping.put(COLUMNS.DAY.getColumnName(), issuebugstat.getDay());
			mapping.put(COLUMNS.TOTAL_NUM.getColumnName(), issuebugstat.getTotalNum());
			mapping.put(COLUMNS.NEW_NUM.getColumnName(), issuebugstat.getNewNum());
			mapping.put(COLUMNS.CLOSED_NUM.getColumnName(), issuebugstat.getClosedNum());
			mapping.put(COLUMNS.REJECTED_NUM.getColumnName(), issuebugstat.getRejectedNum());
			mapping.put(COLUMNS.SURPLUS_NUM.getColumnName(), issuebugstat.getSurplusNum());
			mapping.put(COLUMNS.FFR.getColumnName(), issuebugstat.getFfr());
			if (issuebugstat.getCreatedTime() != null)
				mapping.put(COLUMNS.CREATED_TIME.getColumnName(), new Timestamp (issuebugstat.getCreatedTime().getTime()));
			if (issuebugstat.getUpdatedTime() != null)
				mapping.put(COLUMNS.UPDATED_TIME.getColumnName(), new Timestamp (issuebugstat.getUpdatedTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<IssueBugStat> ALIAS_ROW_MAPPER = new IssueBugStatAliasRowMapper ();
	public static final class  IssueBugStatAliasRowMapper implements RowMapper<IssueBugStat>
	{
		public IssueBugStat mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			IssueBugStat obj = new IssueBugStat();
			obj.setBugStatId(rs.getInt(COLUMNS.BUG_STAT_ID.getColumnAliasName()));
			obj.setRedmineProjectId(rs.getInt(COLUMNS.REDMINE_PROJECT_ID.getColumnAliasName()));
			obj.setDay(rs.getString(COLUMNS.DAY.getColumnAliasName()));
			obj.setTotalNum(rs.getInt(COLUMNS.TOTAL_NUM.getColumnAliasName()));
			obj.setNewNum(rs.getInt(COLUMNS.NEW_NUM.getColumnAliasName()));
			obj.setClosedNum(rs.getInt(COLUMNS.CLOSED_NUM.getColumnAliasName()));
			obj.setRejectedNum(rs.getInt(COLUMNS.REJECTED_NUM.getColumnAliasName()));
			obj.setSurplusNum(rs.getInt(COLUMNS.SURPLUS_NUM.getColumnAliasName()));
			obj.setFfr(rs.getFloat(COLUMNS.FFR.getColumnAliasName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnAliasName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}