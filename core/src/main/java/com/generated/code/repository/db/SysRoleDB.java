package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.SysRole;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class SysRoleDB
{

	private static String TABLE_NAME = "SYS_ROLE";

	private static String TABLE_ALIAS = "sr";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ROLE_ID("role_id"),
		ROLE_NAME("role_name"),
		ROLE_CODE("role_code"),
		IS_ROOT("is_root"),
		CREATED_TIME("created_time"),
		UPDATED_TIME("updated_time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public SysRoleDB ()
	{

	}

	public static final RowMapper<SysRole> ROW_MAPPER = new SysRoleRowMapper ();
	public static final class  SysRoleRowMapper implements RowMapper<SysRole>
	{
		public SysRole mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			SysRole obj = new SysRole();
			obj.setRoleId(rs.getInt(COLUMNS.ROLE_ID.getColumnName()));
			obj.setRoleName(rs.getString(COLUMNS.ROLE_NAME.getColumnName()));
			obj.setRoleCode(rs.getString(COLUMNS.ROLE_CODE.getColumnName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<SysRole> ROW_UNMAPPER = new SysRoleRowUnmapper ();
	public static final class SysRoleRowUnmapper implements RowUnmapper<SysRole>
	{
		public Map<String, Object> mapColumns(SysRole sysrole)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ROLE_ID.getColumnName(), sysrole.getRoleId());
			mapping.put(COLUMNS.ROLE_NAME.getColumnName(), sysrole.getRoleName());
			mapping.put(COLUMNS.ROLE_CODE.getColumnName(), sysrole.getRoleCode());
			mapping.put(COLUMNS.IS_ROOT.getColumnName(), sysrole.getIsRoot());
			if (sysrole.getCreatedTime() != null)
				mapping.put(COLUMNS.CREATED_TIME.getColumnName(), new Timestamp (sysrole.getCreatedTime().getTime()));
			if (sysrole.getUpdatedTime() != null)
				mapping.put(COLUMNS.UPDATED_TIME.getColumnName(), new Timestamp (sysrole.getUpdatedTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<SysRole> ALIAS_ROW_MAPPER = new SysRoleAliasRowMapper ();
	public static final class  SysRoleAliasRowMapper implements RowMapper<SysRole>
	{
		public SysRole mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			SysRole obj = new SysRole();
			obj.setRoleId(rs.getInt(COLUMNS.ROLE_ID.getColumnAliasName()));
			obj.setRoleName(rs.getString(COLUMNS.ROLE_NAME.getColumnAliasName()));
			obj.setRoleCode(rs.getString(COLUMNS.ROLE_CODE.getColumnAliasName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnAliasName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnAliasName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}