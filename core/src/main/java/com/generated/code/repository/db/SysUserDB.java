package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.SysUser;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class SysUserDB
{

	private static String TABLE_NAME = "SYS_USER";

	private static String TABLE_ALIAS = "su";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		USER_ID("user_id"),
		USERNAME("username"),
		PASSWORD("password"),
		FULL_NAME("full_name"),
		EMAIL("email"),
		BIRTHDAY("birthday"),
		SALT("salt"),
		ENABLED("enabled"),
		IS_ROOT("is_root"),
		CREATED_TIME("created_time"),
		UPDATED_TIME("updated_time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public SysUserDB ()
	{

	}

	public static final RowMapper<SysUser> ROW_MAPPER = new SysUserRowMapper ();
	public static final class  SysUserRowMapper implements RowMapper<SysUser>
	{
		public SysUser mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			SysUser obj = new SysUser();
			obj.setUserId(rs.getInt(COLUMNS.USER_ID.getColumnName()));
			obj.setUsername(rs.getString(COLUMNS.USERNAME.getColumnName()));
			obj.setPassword(rs.getString(COLUMNS.PASSWORD.getColumnName()));
			obj.setFullName(rs.getString(COLUMNS.FULL_NAME.getColumnName()));
			obj.setEmail(rs.getString(COLUMNS.EMAIL.getColumnName()));
			obj.setBirthday(rs.getTimestamp(COLUMNS.BIRTHDAY.getColumnName()));
			obj.setSalt(rs.getString(COLUMNS.SALT.getColumnName()));
			obj.setEnabled(rs.getBoolean(COLUMNS.ENABLED.getColumnName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<SysUser> ROW_UNMAPPER = new SysUserRowUnmapper ();
	public static final class SysUserRowUnmapper implements RowUnmapper<SysUser>
	{
		public Map<String, Object> mapColumns(SysUser sysuser)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.USER_ID.getColumnName(), sysuser.getUserId());
			mapping.put(COLUMNS.USERNAME.getColumnName(), sysuser.getUsername());
			mapping.put(COLUMNS.PASSWORD.getColumnName(), sysuser.getPassword());
			mapping.put(COLUMNS.FULL_NAME.getColumnName(), sysuser.getFullName());
			mapping.put(COLUMNS.EMAIL.getColumnName(), sysuser.getEmail());
			if (sysuser.getBirthday() != null)
				mapping.put(COLUMNS.BIRTHDAY.getColumnName(), new Timestamp (sysuser.getBirthday().getTime()));
			mapping.put(COLUMNS.SALT.getColumnName(), sysuser.getSalt());
			mapping.put(COLUMNS.ENABLED.getColumnName(), sysuser.getEnabled());
			mapping.put(COLUMNS.IS_ROOT.getColumnName(), sysuser.getIsRoot());
			if (sysuser.getCreatedTime() != null)
				mapping.put(COLUMNS.CREATED_TIME.getColumnName(), new Timestamp (sysuser.getCreatedTime().getTime()));
			if (sysuser.getUpdatedTime() != null)
				mapping.put(COLUMNS.UPDATED_TIME.getColumnName(), new Timestamp (sysuser.getUpdatedTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<SysUser> ALIAS_ROW_MAPPER = new SysUserAliasRowMapper ();
	public static final class  SysUserAliasRowMapper implements RowMapper<SysUser>
	{
		public SysUser mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			SysUser obj = new SysUser();
			obj.setUserId(rs.getInt(COLUMNS.USER_ID.getColumnAliasName()));
			obj.setUsername(rs.getString(COLUMNS.USERNAME.getColumnAliasName()));
			obj.setPassword(rs.getString(COLUMNS.PASSWORD.getColumnAliasName()));
			obj.setFullName(rs.getString(COLUMNS.FULL_NAME.getColumnAliasName()));
			obj.setEmail(rs.getString(COLUMNS.EMAIL.getColumnAliasName()));
			obj.setBirthday(rs.getTimestamp(COLUMNS.BIRTHDAY.getColumnAliasName()));
			obj.setSalt(rs.getString(COLUMNS.SALT.getColumnAliasName()));
			obj.setEnabled(rs.getBoolean(COLUMNS.ENABLED.getColumnAliasName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnAliasName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnAliasName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}