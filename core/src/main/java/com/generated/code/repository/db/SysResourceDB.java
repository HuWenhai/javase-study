package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.SysResource;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class SysResourceDB
{

	private static String TABLE_NAME = "SYS_RESOURCE";

	private static String TABLE_ALIAS = "sr";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		RESOURCE_ID("resource_id"),
		URL("url"),
		METHOD("method"),
		RESOURCE_NAME("resource_name"),
		PERMISSION("permission"),
		IS_ROOT("is_root"),
		AUTH_TYPE("auth_type"),
		CREATED_TIME("created_time"),
		UPDATED_TIME("updated_time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public SysResourceDB ()
	{

	}

	public static final RowMapper<SysResource> ROW_MAPPER = new SysResourceRowMapper ();
	public static final class  SysResourceRowMapper implements RowMapper<SysResource>
	{
		public SysResource mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			SysResource obj = new SysResource();
			obj.setResourceId(rs.getInt(COLUMNS.RESOURCE_ID.getColumnName()));
			obj.setUrl(rs.getString(COLUMNS.URL.getColumnName()));
			obj.setMethod(rs.getString(COLUMNS.METHOD.getColumnName()));
			obj.setResourceName(rs.getString(COLUMNS.RESOURCE_NAME.getColumnName()));
			obj.setPermission(rs.getString(COLUMNS.PERMISSION.getColumnName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnName()));
			obj.setAuthType(rs.getString(COLUMNS.AUTH_TYPE.getColumnName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<SysResource> ROW_UNMAPPER = new SysResourceRowUnmapper ();
	public static final class SysResourceRowUnmapper implements RowUnmapper<SysResource>
	{
		public Map<String, Object> mapColumns(SysResource sysresource)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.RESOURCE_ID.getColumnName(), sysresource.getResourceId());
			mapping.put(COLUMNS.URL.getColumnName(), sysresource.getUrl());
			mapping.put(COLUMNS.METHOD.getColumnName(), sysresource.getMethod());
			mapping.put(COLUMNS.RESOURCE_NAME.getColumnName(), sysresource.getResourceName());
			mapping.put(COLUMNS.PERMISSION.getColumnName(), sysresource.getPermission());
			mapping.put(COLUMNS.IS_ROOT.getColumnName(), sysresource.getIsRoot());
			mapping.put(COLUMNS.AUTH_TYPE.getColumnName(), sysresource.getAuthType());
			if (sysresource.getCreatedTime() != null)
				mapping.put(COLUMNS.CREATED_TIME.getColumnName(), new Timestamp (sysresource.getCreatedTime().getTime()));
			if (sysresource.getUpdatedTime() != null)
				mapping.put(COLUMNS.UPDATED_TIME.getColumnName(), new Timestamp (sysresource.getUpdatedTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<SysResource> ALIAS_ROW_MAPPER = new SysResourceAliasRowMapper ();
	public static final class  SysResourceAliasRowMapper implements RowMapper<SysResource>
	{
		public SysResource mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			SysResource obj = new SysResource();
			obj.setResourceId(rs.getInt(COLUMNS.RESOURCE_ID.getColumnAliasName()));
			obj.setUrl(rs.getString(COLUMNS.URL.getColumnAliasName()));
			obj.setMethod(rs.getString(COLUMNS.METHOD.getColumnAliasName()));
			obj.setResourceName(rs.getString(COLUMNS.RESOURCE_NAME.getColumnAliasName()));
			obj.setPermission(rs.getString(COLUMNS.PERMISSION.getColumnAliasName()));
			obj.setIsRoot(rs.getBoolean(COLUMNS.IS_ROOT.getColumnAliasName()));
			obj.setAuthType(rs.getString(COLUMNS.AUTH_TYPE.getColumnAliasName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnAliasName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}