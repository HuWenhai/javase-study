package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.SysUserProfile;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class SysUserProfileDB
{

	private static String TABLE_NAME = "SYS_USER_PROFILE";

	private static String TABLE_ALIAS = "sup";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		PROFILE_ID("profile_id"),
		USER_ID("user_id"),
		LANGUAGE("language"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public SysUserProfileDB ()
	{

	}

	public static final RowMapper<SysUserProfile> ROW_MAPPER = new SysUserProfileRowMapper ();
	public static final class  SysUserProfileRowMapper implements RowMapper<SysUserProfile>
	{
		public SysUserProfile mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			SysUserProfile obj = new SysUserProfile();
			obj.setProfileId(rs.getInt(COLUMNS.PROFILE_ID.getColumnName()));
			obj.setUserId(rs.getInt(COLUMNS.USER_ID.getColumnName()));
			obj.setLanguage(rs.getString(COLUMNS.LANGUAGE.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<SysUserProfile> ROW_UNMAPPER = new SysUserProfileRowUnmapper ();
	public static final class SysUserProfileRowUnmapper implements RowUnmapper<SysUserProfile>
	{
		public Map<String, Object> mapColumns(SysUserProfile sysuserprofile)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.PROFILE_ID.getColumnName(), sysuserprofile.getProfileId());
			mapping.put(COLUMNS.USER_ID.getColumnName(), sysuserprofile.getUserId());
			mapping.put(COLUMNS.LANGUAGE.getColumnName(), sysuserprofile.getLanguage());
			return mapping;
		}
	}

	public static final RowMapper<SysUserProfile> ALIAS_ROW_MAPPER = new SysUserProfileAliasRowMapper ();
	public static final class  SysUserProfileAliasRowMapper implements RowMapper<SysUserProfile>
	{
		public SysUserProfile mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			SysUserProfile obj = new SysUserProfile();
			obj.setProfileId(rs.getInt(COLUMNS.PROFILE_ID.getColumnAliasName()));
			obj.setUserId(rs.getInt(COLUMNS.USER_ID.getColumnAliasName()));
			obj.setLanguage(rs.getString(COLUMNS.LANGUAGE.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}