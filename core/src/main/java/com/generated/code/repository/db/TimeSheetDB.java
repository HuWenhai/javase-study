package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.TimeSheet;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class TimeSheetDB
{

	private static String TABLE_NAME = "TIME_SHEET";

	private static String TABLE_ALIAS = "ts";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		TIME_SHEET_ID("time_sheet_id"),
		REDMINE_USER_ID("redmine_user_id"),
		REDMINE_PROJECT_ID("redmine_project_id"),
		DAY("day"),
		TOTAL_HOURS("total_hours"),
		WORK_HOURS("work_hours"),
		OVERTIME_HOURS("overtime_hours"),
		BUSINESS_TRAVEL_HOURS("business_travel_hours"),
		BUSINESS_TRAVEL_OVERTIME_HOURS("business_travel_overtime_hours"),
		CREATED_TIME("created_time"),
		UPDATED_TIME("updated_time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public TimeSheetDB ()
	{

	}

	public static final RowMapper<TimeSheet> ROW_MAPPER = new TimeSheetRowMapper ();
	public static final class  TimeSheetRowMapper implements RowMapper<TimeSheet>
	{
		public TimeSheet mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			TimeSheet obj = new TimeSheet();
			obj.setTimeSheetId(rs.getInt(COLUMNS.TIME_SHEET_ID.getColumnName()));
			obj.setRedmineUserId(rs.getInt(COLUMNS.REDMINE_USER_ID.getColumnName()));
			obj.setRedmineProjectId(rs.getInt(COLUMNS.REDMINE_PROJECT_ID.getColumnName()));
			obj.setDay(rs.getString(COLUMNS.DAY.getColumnName()));
			obj.setTotalHours(rs.getFloat(COLUMNS.TOTAL_HOURS.getColumnName()));
			obj.setWorkHours(rs.getFloat(COLUMNS.WORK_HOURS.getColumnName()));
			obj.setOvertimeHours(rs.getFloat(COLUMNS.OVERTIME_HOURS.getColumnName()));
			obj.setBusinessTravelHours(rs.getFloat(COLUMNS.BUSINESS_TRAVEL_HOURS.getColumnName()));
			obj.setBusinessTravelOvertimeHours(rs.getFloat(COLUMNS.BUSINESS_TRAVEL_OVERTIME_HOURS.getColumnName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<TimeSheet> ROW_UNMAPPER = new TimeSheetRowUnmapper ();
	public static final class TimeSheetRowUnmapper implements RowUnmapper<TimeSheet>
	{
		public Map<String, Object> mapColumns(TimeSheet timesheet)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.TIME_SHEET_ID.getColumnName(), timesheet.getTimeSheetId());
			mapping.put(COLUMNS.REDMINE_USER_ID.getColumnName(), timesheet.getRedmineUserId());
			mapping.put(COLUMNS.REDMINE_PROJECT_ID.getColumnName(), timesheet.getRedmineProjectId());
			mapping.put(COLUMNS.DAY.getColumnName(), timesheet.getDay());
			mapping.put(COLUMNS.TOTAL_HOURS.getColumnName(), timesheet.getTotalHours());
			mapping.put(COLUMNS.WORK_HOURS.getColumnName(), timesheet.getWorkHours());
			mapping.put(COLUMNS.OVERTIME_HOURS.getColumnName(), timesheet.getOvertimeHours());
			mapping.put(COLUMNS.BUSINESS_TRAVEL_HOURS.getColumnName(), timesheet.getBusinessTravelHours());
			mapping.put(COLUMNS.BUSINESS_TRAVEL_OVERTIME_HOURS.getColumnName(), timesheet.getBusinessTravelOvertimeHours());
			if (timesheet.getCreatedTime() != null)
				mapping.put(COLUMNS.CREATED_TIME.getColumnName(), new Timestamp (timesheet.getCreatedTime().getTime()));
			if (timesheet.getUpdatedTime() != null)
				mapping.put(COLUMNS.UPDATED_TIME.getColumnName(), new Timestamp (timesheet.getUpdatedTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<TimeSheet> ALIAS_ROW_MAPPER = new TimeSheetAliasRowMapper ();
	public static final class  TimeSheetAliasRowMapper implements RowMapper<TimeSheet>
	{
		public TimeSheet mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			TimeSheet obj = new TimeSheet();
			obj.setTimeSheetId(rs.getInt(COLUMNS.TIME_SHEET_ID.getColumnAliasName()));
			obj.setRedmineUserId(rs.getInt(COLUMNS.REDMINE_USER_ID.getColumnAliasName()));
			obj.setRedmineProjectId(rs.getInt(COLUMNS.REDMINE_PROJECT_ID.getColumnAliasName()));
			obj.setDay(rs.getString(COLUMNS.DAY.getColumnAliasName()));
			obj.setTotalHours(rs.getFloat(COLUMNS.TOTAL_HOURS.getColumnAliasName()));
			obj.setWorkHours(rs.getFloat(COLUMNS.WORK_HOURS.getColumnAliasName()));
			obj.setOvertimeHours(rs.getFloat(COLUMNS.OVERTIME_HOURS.getColumnAliasName()));
			obj.setBusinessTravelHours(rs.getFloat(COLUMNS.BUSINESS_TRAVEL_HOURS.getColumnAliasName()));
			obj.setBusinessTravelOvertimeHours(rs.getFloat(COLUMNS.BUSINESS_TRAVEL_OVERTIME_HOURS.getColumnAliasName()));
			obj.setCreatedTime(rs.getTimestamp(COLUMNS.CREATED_TIME.getColumnAliasName()));
			obj.setUpdatedTime(rs.getTimestamp(COLUMNS.UPDATED_TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}