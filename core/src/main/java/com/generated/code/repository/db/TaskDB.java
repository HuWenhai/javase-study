package com.generated.code.repository.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.edgar.core.jdbc.RowUnmapper;
import com.generated.code.domain.Task;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class TaskDB
{

	private static String TABLE_NAME = "TASK";

	private static String TABLE_ALIAS = "tas";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		TASK_ID("task_id"),
		COMPANY_ID("company_id"),
		TASK_NAME("task_name"),
		ASSIGNEE("assignee"),
		ASSIGNEE_ID("assignee_id"),
		ASSIGNEE_TIME("assignee_time"),
		COMMENT("comment"),
		TRACKER_ID("tracker_id"),
		TRACKER("tracker"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public TaskDB ()
	{

	}

	public static final RowMapper<Task> ROW_MAPPER = new TaskRowMapper ();
	public static final class  TaskRowMapper implements RowMapper<Task>
	{
		public Task mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			Task obj = new Task();
			obj.setTaskId(rs.getInt(COLUMNS.TASK_ID.getColumnName()));
			obj.setCompanyId(rs.getInt(COLUMNS.COMPANY_ID.getColumnName()));
			obj.setTaskName(rs.getString(COLUMNS.TASK_NAME.getColumnName()));
			obj.setAssignee(rs.getString(COLUMNS.ASSIGNEE.getColumnName()));
			obj.setAssigneeId(rs.getInt(COLUMNS.ASSIGNEE_ID.getColumnName()));
			obj.setAssigneeTime(rs.getFloat(COLUMNS.ASSIGNEE_TIME.getColumnName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnName()));
			obj.setTrackerId(rs.getInt(COLUMNS.TRACKER_ID.getColumnName()));
			obj.setTracker(rs.getString(COLUMNS.TRACKER.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<Task> ROW_UNMAPPER = new TaskRowUnmapper ();
	public static final class TaskRowUnmapper implements RowUnmapper<Task>
	{
		public Map<String, Object> mapColumns(Task task)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.TASK_ID.getColumnName(), task.getTaskId());
			mapping.put(COLUMNS.COMPANY_ID.getColumnName(), task.getCompanyId());
			mapping.put(COLUMNS.TASK_NAME.getColumnName(), task.getTaskName());
			mapping.put(COLUMNS.ASSIGNEE.getColumnName(), task.getAssignee());
			mapping.put(COLUMNS.ASSIGNEE_ID.getColumnName(), task.getAssigneeId());
			mapping.put(COLUMNS.ASSIGNEE_TIME.getColumnName(), task.getAssigneeTime());
			mapping.put(COLUMNS.COMMENT.getColumnName(), task.getComment());
			mapping.put(COLUMNS.TRACKER_ID.getColumnName(), task.getTrackerId());
			mapping.put(COLUMNS.TRACKER.getColumnName(), task.getTracker());
			return mapping;
		}
	}

	public static final RowMapper<Task> ALIAS_ROW_MAPPER = new TaskAliasRowMapper ();
	public static final class  TaskAliasRowMapper implements RowMapper<Task>
	{
		public Task mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			Task obj = new Task();
			obj.setTaskId(rs.getInt(COLUMNS.TASK_ID.getColumnAliasName()));
			obj.setCompanyId(rs.getInt(COLUMNS.COMPANY_ID.getColumnAliasName()));
			obj.setTaskName(rs.getString(COLUMNS.TASK_NAME.getColumnAliasName()));
			obj.setAssignee(rs.getString(COLUMNS.ASSIGNEE.getColumnAliasName()));
			obj.setAssigneeId(rs.getInt(COLUMNS.ASSIGNEE_ID.getColumnAliasName()));
			obj.setAssigneeTime(rs.getFloat(COLUMNS.ASSIGNEE_TIME.getColumnAliasName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnAliasName()));
			obj.setTrackerId(rs.getInt(COLUMNS.TRACKER_ID.getColumnAliasName()));
			obj.setTracker(rs.getString(COLUMNS.TRACKER.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values().length;
		for (COLUMNS c : COLUMNS.values())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}